#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (n); i++)
using ll = long long;

// 🔷初見でどうやったら解けるか
// 数え上げの問題だが実質組合せ最適化問題
// 複数回操作系の類。交互/パリティが絡む問題は累積和が使えることが多いことを念頭に置いておく。
// 組合せ最適化問題は、全探索できない限りは基本法則性を見抜く必要がある。エスパーするコツは自由度が低い部分から考えること。
// 左端はxとして選ぶしかなく自由度が最も低い。ここを基準に考えていく。n=5くらいまでを文字で考えるとパリティの和が不変であるという法則が見えてくる。

// 🔷抑えるべき抽象論は？
// エスパーするコツ
// - 自由度が低い部分から考える
// - 交互/パリティ,個数,階差は累積和が絡むことが多い
// - 実験はsampleだけじゃなく文字でもやってみる
// - 補集合を考えてみる
// - 操作によって実質的に影響を受ける部分のみに注目する

int main() {
    int n; cin >> n;
    vector<int> a(n);
    rep(i, n) cin >> a[i];

    vector<ll> s(n + 1);
    rep(i, n) {
        if (i % 2 == 0) s[i + 1] = s[i] + a[i];
        else s[i + 1] = s[i] - a[i];
    }

    ll ans = 0;
    unordered_map<ll, int> mp;
    rep(i, n + 1) {
        ans += mp[s[i]];
        mp[s[i]]++;
    }
    cout << ans << endl;
}
