#include <bits/stdc++.h>
using namespace std;
#define rep(i, n) for (int i = 0; i < (n); i++)

// https://atcoder.jp/contests/abc125/tasks/abc125_c

// üî∑ÂàùË¶ã„Åß„Å©„ÅÜ„ÇÑ„Å£„Åü„ÇâËß£„Åë„Çã„Åã
// ÁµÑÂêà„ÅõÊúÄÈÅ©ÂåñÂïèÈ°å„Å†„Åå„ÄÅ„Å©„ÅÆÂÄ§„Å´Â§â„Åà„Çã„ÅÆ„Åã„ÅØÁÑ°Êï∞„Å´ÈÅ∏ÊäûËÇ¢„Åå„ÅÇ„Çã„ÅÆ„Åß„ÄÅÊúÄÈÅ©„Å™Â§âÊõ¥ÂÄ§„ÇíËÄÉ„Åà„Çã„Å®„Åì„Çç„Åã„ÇâÂßã„ÇÅ„Çã„ÄÇ
// „Åô„Çã„Å®„ÄÅÂâäÈô§„Åô„Çã„ÄÅ„ÅÇ„Çã„ÅÑ„ÅØ‰ªñ„ÅÆ‰ªªÊÑè„ÅÆÂÄ§„Å´Êõ∏„ÅçÊèõ„Åà„Çã„Åì„Å®„ÅåÂ∏∏„Å´ÊúÄÈÅ©„Å´„Å™„Çã„Åì„Å®„Åå„Çè„Åã„Çã„ÄÇ
// Â§âÊõ¥„Åô„ÇãÂÄ§„ÅÆ„Çπ„Ç≠„É£„É≥„ÅØO(n)„Å™„ÅÆ„Åß„ÄÅÊÆã„Çän-1ÂÄã„ÅÆgcd„ÇíO(logn)‰ª•‰∏ã„ÅßÊ±Ç„ÇÅ„Çâ„Çå„Çå„Å∞ËâØ„ÅÑ
// gcd„ÅØÂÄ§„ÅÆ„Ç≠„É£„É≥„Çª„É´„ÅåÈ´òÈÄü„Å´„Åß„Åç„Å™„ÅÑ„ÅÆ„ÅßÂ∞∫Âèñ„ÇäÁöÑ„Å´„ÇÑ„Çã„ÅÆ„ÅØÁÑ°ÁêÜ„Å†„Åå„ÄÅ„Åì„ÅÜ„ÅÑ„Å£„ÅüÊï∞Â≠ó„ÅÆÂ†¥Âêà„ÅØ„ÄÅ‰∏°ÂÅ¥Á¥ØÁ©çÂíå„ÅåÊúâÂäπ
// „ÇÇ„Åó„Åè„ÅØÂå∫ÈñìÂêåÂ£´„ÅÆÂíå„Å®Êçâ„Åà„Å¶Âå∫Èñì„Ç¢„É´„Ç¥„É™„Ç∫„É†„Çí‰Ωø„Å£„Å¶„ÇÇËâØ„ÅÑ„ÄÇÂÜçÂ∏∞ÁöÑ„Å™„ÅçÊßãÈÄ†„ÇíËÄÉ„Åà„Å¶„É°„É¢Âåñ„Åó„Å¶„ÇÇËâØ„ÅÑ„ÄÇ
// „É°„É¢ÂåñÂÜçÂ∏∞„ÅØÁπ∞„ÇäËøî„Åó‰∫å‰πóÊ≥ï„Å®Ëøë„ÅÑËÄÉ„ÅàÊñπ„ÅßÊ±éÁî®ÊÄß„ÅåÈ´ò„ÅÑ„ÄÇÁµêÂêàÂâá„ÅåÊàêÁ´ã„Åô„ÇãÈõÜÁ¥ÑÂÄ§„Å´„Åä„ÅÑ„Å¶ÊúâÂäπ

// üî∑Êäë„Åà„Çã„Åπ„ÅçÊäΩË±°Ë´ñ„ÅØÔºü
// ÈÖçÂàóÂÜÖ„ÅÆÁâπÂÆö„ÅÆË¶ÅÁ¥†„ÇíÈô§„ÅÑ„ÅüÈõÜË®àÂÄ§„ÅÆÊ±Ç„ÇÅÊñπ
// - Â∞∫Âèñ„ÇäÊ≥ï
// - ‰∏°ÂÅ¥Á¥ØÁ©çÂíå
// - „Çª„Ç∞Êú®
// - „É°„É¢ÂåñÂÜçÂ∏∞
//   - Áπ∞„ÇäËøî„Åó‰∫å‰πóÊ≥ïÁöÑËÄÉ„ÅàÊñπ
//   - ÁµêÂêàÂâá„ÅåÊàêÁ´ã„Åô„ÇãÈõÜÁ¥ÑÂÄ§„Å´„Åä„ÅÑ„Å¶ÊúâÂäπ

// „É°„É¢ÂåñÂÜçÂ∏∞„Å´„Çà„ÇãËß£Ê≥ï
int main() {
    int n; cin >> n;
    vector<int> a(n);
    rep(i, n) cin >> a[i];

    // „É°„É¢ÂåñÂÜçÂ∏∞
    vector<int> memo(n * 2 - 1, -1);
    auto rec = [&](auto rec, int id) {
        if (memo[id] != -1) return memo[id];
        if (id >= n - 1) return memo[id] = a[id - n + 1];
        return memo[id] = gcd(rec(rec, id * 2 + 1), rec(rec, id * 2 + 2));
    };

    int ans = rec(rec, 0);
    rep(i, n) {
        auto reset = [&]() {
            memo[0] = -1;
            int ix = i + n - 1;
            while (ix > 0) {
                memo[ix] = -1;
                ix = (ix - 1) / 2;
            }
        };

        int tmp = a[i];
        a[i] = a[(i + 1) % n];
        reset();
        ans = max(ans, rec(rec, 0));

        a[i] = tmp;
        reset();
        rec(rec, 0);
    }
    cout << ans << endl;
}

// Á¥ØÁ©çÂíå„Å´„Çà„ÇãËß£Ê≥ï
int main() {
    int n; cin >> n;
    vector<int> a(n);
    rep(i, n) cin >> a[i];

    vector<int> sl(n + 1), sr(n + 1);
    rep(i, n) sl[i + 1] = gcd(sl[i], a[i]);
    for (int i = n; i > 0; i--) sr[i - 1] = gcd(sr[i], a[i - 1]);

    int ans = 0;
    rep(i, n) {
        ans = max(ans, gcd(sl[i], sr[i + 1]));
    }
    cout << ans << endl;
}

// „Çª„Ç∞Êú®„Å´„Çà„ÇãËß£Ê≥ï
template<auto op, int iv>
struct Segtree {
private:
    int n = 1;
    vector<int> dat;

public:
    Segtree() {}
    Segtree(const vector<int>& a) {
        int sz = a.size();
        while (n < sz) n *= 2;
        dat = vector<int>(n * 2 - 1, iv);

        for (int i = 0; i < sz; i++) dat[i + n - 1] = a[i];
        for (int i = n - 2; i >= 0; i--) {
            dat[i] = op(dat[i * 2 + 1], dat[i * 2 + 2]);
        }
    }

    int query(int a, int b, int id = 0, int l = 0, int r = -1) {
        if (r < 0) r = n;
        if (b <= l || r <= a) return iv;
        if (a <= l && r <= b) return dat[id];
        else {
            int vl = query(a, b, id * 2 + 1, l, (l + r) / 2);
            int vr = query(a, b, id * 2 + 2, (l + r) / 2, r);
            return op(vl, vr);
        }
    }

    // ÂÖÉ„ÅÆÈÖçÂàó„Åßindex=k„ÅÆË¶ÅÁ¥†„Çíx„Å´Êõ¥Êñ∞
    void update(int k, int x) {
        int id = k + n - 1;  // „Éé„Éº„ÉâÁï™Âè∑„Å´Â§âÊèõ
        dat[id] = x;
        while (id > 0) {
            id = (id - 1) / 2;
            dat[id] = op(dat[id * 2 + 1], dat[id * 2 + 2]);
        }
    }
};

int op(int a, int b) { return gcd(a, b); }

int main() {
    int n; cin >> n;
    vector<int> a(n);
    rep(i, n) cin >> a[i];

    Segtree<op, 0> seg(a);

    int ans = 0;
    rep(i, n) {
        int res = gcd(seg.query(0, i), seg.query(i + 1, n));
        ans = max(ans, res);
    }
    cout << ans << endl;
}
