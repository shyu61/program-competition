// Nim(Nim): p277
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

// XORは論理的な対称性を表現できる
// XOR=0 => 全ての桁の1の個数が偶数, XOR≠0 => 少なくとも1つの桁の1の個数が奇数
// 最も石が多い山を選べば全ての桁のbitを変えることができ、偶奇によってのみ全体のXORが0かどうかが決まるため、一つの山に対する操作で必ず0を作り出すことができる。
// 逆にXOR=0の状態から操作すれば必ずXOR≠0になるため、常に相手にXOR=0の状態を押し付け続ければ必勝となる
// 常に相手に数理的に対称な状態(XOR=0)を作り出せれば、相手の操作は絶対に最後の一手にはなり得ない(同時に1山に対してしか操作できないため、必ず操作後は非対称になる)ので必勝になる

// Nimのように、独立した部分集合群に対して統一的な1つの指標を作りたいときにXORは役立つ
// (XORはそれ以外にも適用できるケースがあるのでその限りではない)

int main() {
    int n; cin >> n;
    int x = 0;
    // 相手の操作時にXOR=0の状況を作り出せるなら必勝
    // -> 初期配置がXOR=0 => 必負
    // -> 初期配置がXOR≠0 => 必勝(操作して相手ターン時にXOR=0にできる)
    for (int i = 0; i < n; i++) {
        int a; cin >> a;
        x ^= a;
    }
    cout << (x != 0 ? "Alice" : "Bob") << endl;
}
